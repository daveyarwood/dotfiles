#!/usr/bin/env bash

set -eo pipefail

get_current_sink() {
  pactl info | sed -En 's/Default Sink: (.*)/\1/p'
}

sink_notification() {
  local sink="$1"

  # Clear the last notification for a cleaner view when toggling sinks
  # repeatedly.
  dunstctl close

  notify-send "Default sink: $sink"

}

sinks="$(pactl list sinks short | cut -f2)"

current_sink="$(get_current_sink)"

switch_to_next=""
while read -r sink; do
  if [[ "$switch_to_next" == "yes" ]]; then
    previous_sink="$sink"

    pactl set-default-sink "$sink"

    # Update 2023-09-24: I ran into an issue where, after selecting one sink in
    # particular, it doesn't "take" and the sound system ends up re-selecting
    # another sync, which messes up this whole toggling routine.
    #
    # To work around this, we'll check here that the sink selection "took", and
    # if it doesn't, then we'll ignore that sink and move on to the next one.
    if [[ "$(get_current_sink)" == "$sink" ]]; then
      sink_notification "$sink"
      exit
    else
      echo "WARN: failed to set sink to $sink; skipping it."
      sink="$previous_sink"
    fi
  fi

  if [[ "$sink" == "$current_sink" ]]; then
    switch_to_next="yes"
  fi
done <<< "$sinks"

# If we get this far, it means the last sink in the list was selected. So, we'll
# loop back around to the beginning of the list and select the first one.
sink="$(head -n1 <<< "$sinks")"

pactl set-default-sink "$sink"
sink_notification "$sink"
