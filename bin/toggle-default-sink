#!/usr/bin/env bash

set -eo pipefail

get_current_sink() {
  pactl info | sed -En 's/Default Sink: (.*)/\1/p'
}

sink_notification() {
  local sink="$1"

  # Clear the last notification for a cleaner view when toggling sinks
  # repeatedly.
  dunstctl close

  notify-send "Default sink: $sink"

  echo "Selected sink: $sink"
}

sinks="$(pactl list sinks short | cut -f2)"

current_sink="$(get_current_sink)"

# Some of the sinks don't work - when you select the sink, it doesn't "take" and
# the sound system ends up silently re-selecting a different sink.
#
# This script checks for that scenario and moves on to the next sink in the
# list if the selection doesn't "take".
#
# We want the list of sinks to be in order starting after the currently selected
# sink (and wrapping around when it reaches the end), so the loop below
# constructs that list and saves it as $sinks_rotated.
sinks_before="$(mktemp)"
sinks_after="$(mktemp)"
encountered_current_sink="no"

while read -r sink; do
  if [[ "$sink" == "$current_sink" ]]; then
    encountered_current_sink="yes"
  elif [[ "$encountered_current_sink" == "yes" ]]; then
    echo "$sink" >> "$sinks_after"
  else
    echo "$sink" >> "$sinks_before"
  fi
done <<< "$sinks"

sinks_rotated="$(cat "$sinks_after" "$sinks_before" <(echo "$current_sink"))"

while read -r sink; do
  pactl set-default-sink "$sink"

  if [[ "$(get_current_sink)" == "$sink" ]]; then
    sink_notification "$sink"
    exit 0
  else
    echo "WARN: failed to set sink to $sink; skipping it."
  fi
done <<< "$sinks_rotated"
