#!/usr/bin/env ruby

# frozen_string_literal: true

require 'rubygems'
require 'bundler/setup'
require 'watir'
require 'colorize'

exit 0 unless $PROGRAM_NAME == __FILE__

def press_enter_to_continue
  warn '--- Press ENTER to continue ---'
  $stdin.gets
end

def get_env(env_var)
  ENV[env_var] || raise("#{env_var} environment variable not set.")
end

SECU_USERNAME = get_env 'SECU_USERNAME'
SECU_PASSWORD = get_env 'SECU_PASSWORD'

SECU_URL = 'https://www.ncsecu.org'

if ARGV.count.zero?
  warn \
    "Usage: #{$PROGRAM_NAME} ACCOUNT_NAME_SUBSTRING [ACCOUNT_NAME_SUBSTRING...]"
  exit 1
end

ACCOUNT_NAME_SUBSTRINGS = ARGV

################################################################################

BROWSER = Watir::Browser.new :chrome
BROWSER.goto SECU_URL

def account_row(account_name_substring)
  warn 'Looking for account row...'

  accounts_table = BROWSER.table(id: 'CheckingSavingsMoneyMarket')
  accounts_table.wait_until(&:present?)

  accounts_table.tbody.trs.detect do |tr|
    tr.tds.any? { |td| td.text =~ Regexp.new(account_name_substring, 'i') }
  end \
  || raise("No account found with name containing #{account_name_substring}.")
end

def view_transactions_link(row)
  warn 'Looking for "View transactions" link...'

  row.tds.each do |td|
    td.links.each do |link|
      return link if link.href =~ %r{accounts/history}
    end
  end

  raise "couldn't find view transactions link"
end

# FIXME: This is the noticeable bottleneck of the script.
# TODO: Figure out why it's so slow and see if I can make it faster somehow.
def transaction_cells_text
  warn 'Collecting transaction info...'

  transactions_table = BROWSER.table(id: 'gridCheckingHistory')
  transactions_table.wait_until(&:present?)

  transactions_table.tbody.trs.map do |row|
    row.tds.map(&:text)
  end
end

def sanitize_cell(text)
  lines = text.delete("\t").split("\n")

  if lines.count == 1
    lines.first.strip
  else
    lines.select { |txt| txt =~ /.*[A-Za-z].*/ }.last.strip
  end
end

def sanitize(transaction_cells)
  transaction_cells.slice(1..-2).map do |cell_text|
    cell_text.slice(2..-2).map { |text| sanitize_cell(text) }
  end
end

################################################################################

# HACK: This script used to successfully fill in the user name and password
# fields and log in automatically. But then SECU did something that made that
# stop working. It only works if I log in manually. I think they might have some
# "protections" in place to recognize activity that looks like a script/bot
# logging in and reject the request. Either that, or there is some bug in their
# login UI that only manifests when a script is rapidly filling out and
# submitting the form.
#
# I experimented with this for a really long time to try to figure out what part
# exactly wasn't working and fix it, but I couldn't figure it out.
#
# So, as a stopgap, I'm just having the script copy my username and password to
# the clipboard and prompting me to log in manually.

# FIXME: This assumes that `xsel` is available on the PATH
`echo -n "#{SECU_USERNAME}" | xsel --clipboard --input`
warn 'Copied username to clipboard. Please paste it into the user name input.'
press_enter_to_continue

`echo -n "#{SECU_PASSWORD}" | xsel --clipboard --input`
warn \
  'Copied password to clipboard. Please paste it into the password input and ' \
  'finish logging in.'
press_enter_to_continue

# BROWSER.text_field(id: 'userIDHome').set SECU_USERNAME
# BROWSER.text_field(id: 'userPasswordHome').set SECU_PASSWORD

# sign_in_button = BROWSER.input(type: 'submit', title: 'Login submit')
# sign_in_button.click

def parse_transaction_cells_text
  sanitize(transaction_cells_text).map do |cell_values|
    date, description, amount1, amount2 = cell_values
    {
      date: date,
      description: description,
      type: !amount1.empty? ? 'debit' : 'credit',
      amount: !amount1.empty? ? amount1 : amount2
    }
  end
end

def account_transactions(account_name_substring)
  warn "\n####### #{account_name_substring} #######\n"

  BROWSER.goto 'https://onlineaccess.ncsecu.org/O/accounts/balances.aspx'

  row = account_row(account_name_substring)
  view_transactions_link(row).click

  parse_transaction_cells_text
end

# HACK: For some reason, the `puts` output was getting buffered and not printed
# to the console until the very end (maybe Watir is doing something weird?). But
# I want to print each account name pattern followed by the output for that
# account.
#
# So, instead of printing the lines immediately, we collect them in this map and
# then print everything at the end the way we want it.
ACCOUNT_TRANSACTIONS = ACCOUNT_NAME_SUBSTRINGS.to_h do |substring|
  [substring, account_transactions(substring)]
end

BROWSER.quit

ACCOUNT_TRANSACTIONS.each do |account_name_substring, account_transactions|
  warn "\n============================================================"
  warn "===== #{account_name_substring} ====="
  warn "============================================================\n"

  max_date_length = \
    account_transactions.map { |tx| tx[:date].size }.max

  max_description_length = \
    account_transactions.map { |tx| tx[:description].size }.max

  account_transactions.each do |tx|
    date = tx[:date].ljust(max_date_length)
    description = tx[:description].ljust(max_description_length)
    line = "#{date}   #{description}   #{tx[:amount]}"
    puts tx[:type] == 'credit' ? line.green : line
  end

  warn ''
  warn ''
end
