{:clj-kondo
 ;; I've done a lot of work in my clojure-lsp :macro-defs to teach my linting
 ;; setup about various macros and eliminate these types of warnings.
 ;; clojure-lsp also does a lot of the things that clj-kondo does, so I'm
 ;; choosing to disable certain warnings from clj-kondo that I'm only seeing
 ;; because clj-kondo doesn't understand the macros the way that clojure-lsp
 ;; does.
 {:linters {:unresolved-symbol {:level :off}}}

 :macro-defs
 {adzerk.api.geir/defapicall
  [:declaration :params :bound-elements]

  adzerk.api.v1-fixes/with-json-body
  [:bindings :bound-elements]

  adzerk.env/def
  [{:element [:declaration :element], :repeat true}]

  adzerk.libclj.util/with-let
  [:bindings :bound-elements]

  castra.core/defrpc
  [:declaration
   {:element :element, :pred :string}
   :function-params-and-bodies]

  clojure.core/dotimes
  [:bindings :bound-elements]

  clojure.test.check.generators/let
  [:bindings :bound-elements]

  geir-backend.query/defview
  [:declaration
   {:element :element, :pred :string}
   :params
   :bound-elements]

  geir-backend.validation/defpre-
  [:declaration :params :bound-elements]

  geir-backend.validation/defvalidator-
  [:declaration :params :bound-elements]

  hoplon.core/defelem
  [:declaration
   {:element :element, :pred :string}
   :params
   :bound-elements]

  hoplon.core/elem
  [:params :bound-elements]

  hoplon.core/for-tpl
  [:bindings :bound-elements]

  integration.model/defstep
  [:declaration :elements]

  javelin.core/cell-let
  [:bindings :bound-elements]

  javelin.core/defc
  [:declaration :element]

  javelin.core/defc=
  [:declaration :element]

  javelin.core/formula-of
  [:element :bound-elements]

  javelin.core/formulet
  [:bindings :bound-elements]

  javelin.core/with-let
  [:bindings :bound-elements]

  ui.form/definput
  [:declaration :params :bound-elements]

  ui.form/with-form
  [:bindings :bound-elements]

  ui.macros/with-attr-bindings
  [:element :params :bound-elements]

  ui.paging/defp
  [:declaration :elements]

  ui.util.experimental/with-dims
  [:param :bindings :bound-elements]}}
