{:clj-kondo
 ;; I've done a lot of work in my clojure-lsp :macro-defs to teach my linting
 ;; setup about various macros and eliminate these types of warnings.
 ;; clojure-lsp also does a lot of the things that clj-kondo does, so I'm
 ;; choosing to disable certain warnings from clj-kondo that I'm only seeing
 ;; because clj-kondo doesn't understand the macros the way that clojure-lsp
 ;; does.
 {:linters {:unresolved-symbol {:level :off}}}

 :macro-defs
 {clojure.core/dotimes
  [:bindings :bound-elements]

  clojure.test.check.generators/let
  [:bindings :bound-elements]

  ;; NOTE: These hoplon and javelin configs could be packaged with the library,
  ;; and then I wouldn't need them in my personal setup.

  hoplon.core/defelem
  [:declaration
   {:element :element, :pred :string}
   :params
   :bound-elements]

  hoplon.core/elem
  [:params :bound-elements]

  hoplon.core/for-tpl
  [:bindings :bound-elements]

  javelin.core/cell-let
  [:bindings :bound-elements]

  javelin.core/defc
  [:declaration :element]

  javelin.core/defc=
  [:declaration :element]

  javelin.core/formula-of
  [:element :bound-elements]

  javelin.core/formulet
  [:bindings :bound-elements]

  javelin.core/with-let
  [:bindings :bound-elements]}}
